{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  postAdminvendor(data) {\n    return this.http.post(\"http://localhost:3000/adminvendor\", data).pipe(map(res => {\n      return res;\n    }));\n  }\n  getAdminvendor(username) {\n    return this.http.get(\"http://localhost:3000/adminvendor?role=vendor\").pipe(map(res => {\n      return res;\n    }));\n  }\n  updateAdminvendor(data, id) {\n    return this.http.put(\"http://localhost:3000/adminvendor\" + id, data).pipe(map(res => {\n      return res;\n    }));\n  }\n  deleteAdminvendor(id) {\n    return this.http.delete(\"http://localhost:3000/adminvendor\" + \"/\" + id).pipe(map(res => {\n      return res;\n    }));\n  }\n  postVendor(data) {\n    return this.http.post(\"http://localhost:3000/vendorproduct\", data).pipe(map(res => {\n      return res;\n    }));\n  }\n  getVendor() {\n    return this.http.get(\"http://localhost:3000/vendorproduct\").pipe(map(res => {\n      return res;\n    }));\n  }\n  updateVendor(data, id) {\n    return this.http.put(\"http://localhost:3000/vendorproduct\" + \"/\" + id, data).pipe(map(res => {\n      return res;\n    }));\n  }\n  deleteVendor(id) {\n    return this.http.delete(\"http://localhost:3000/vendorproduct\" + \"/\" + id).pipe(map(res => {\n      return res;\n    }));\n  }\n  getProductById(username) {\n    return this.http.get(\"http://localhost:3000/vendorproduct/?vendorname=\" + username).pipe(map(res => {\n      return res;\n    }));\n  }\n  getVendorById(username) {\n    return this.http.get(\"http://localhost:3000/adminvendor/?username=\" + username).pipe(map(res => {\n      return res;\n    }));\n  }\n  login(user) {\n    sessionStorage.setItem('user', JSON.stringify(user));\n  }\n  isloggin() {\n    if (sessionStorage.getItem('user')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","ApiService","constructor","http","postAdminvendor","data","post","pipe","res","getAdminvendor","username","get","updateAdminvendor","id","put","deleteAdminvendor","delete","postVendor","getVendor","updateVendor","deleteVendor","getProductById","getVendorById","login","user","sessionStorage","setItem","JSON","stringify","isloggin","getItem","factory","providedIn"],"sourceRoot":"","sources":["/home/aspire121/Practice/Angular/Task-3/src/app/shared/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  postAdminvendor(data: any) {\n    return this.http.post<any>(\"http://localhost:3000/adminvendor\", data)\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n  getAdminvendor(username: any) {\n    return this.http.get<any>(\"http://localhost:3000/adminvendor?role=vendor\")\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n  updateAdminvendor(data: any, id: number) {\n    return this.http.put<any>(\"http://localhost:3000/adminvendor\" + id, data)\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n  deleteAdminvendor(id: number) {\n    return this.http.delete<any>(\"http://localhost:3000/adminvendor\" + \"/\" + id)\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n\n  postVendor(data: any) {\n    return this.http.post<any>(\"http://localhost:3000/vendorproduct\", data)\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n  getVendor() {\n    return this.http.get<any>(\"http://localhost:3000/vendorproduct\")\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n  updateVendor(data: any, id: number) {\n    return this.http.put<any>(\"http://localhost:3000/vendorproduct\" + \"/\" + id, data)\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n  deleteVendor(id: number) {\n    return this.http.delete<any>(\"http://localhost:3000/vendorproduct\" + \"/\" + id)\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n\n  getProductById(username: any) {\n    return this.http.get<any>(\"http://localhost:3000/vendorproduct/?vendorname=\" + username)\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n\n  getVendorById(username: any) {\n    return this.http.get<any>(\"http://localhost:3000/adminvendor/?username=\" + username)\n      .pipe(map((res: any) => {\n        return res;\n      }))\n  }\n\n  login(user: any) {\n    sessionStorage.setItem('user', JSON.stringify(user));\n  }\n\n  isloggin() {\n    if (sessionStorage.getItem('user')) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}