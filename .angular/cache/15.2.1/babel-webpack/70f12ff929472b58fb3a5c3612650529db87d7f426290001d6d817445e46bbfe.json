{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  postAdminvendor(data) {\n    return this.http.post(\"http://localhost:3000/adminvendor\", data).pipe(map(res => {\n      return res;\n    }));\n  }\n  getAdminvendor(username) {\n    return this.http.get(\"http://localhost:3000/adminvendor?role=vendor\").pipe(map(res => {\n      return res;\n    }));\n  }\n  updateAdminvendor(data, id) {\n    return this.http.put(\"http://localhost:3000/adminvendor\" + id, data).pipe(map(res => {\n      return res;\n    }));\n  }\n  deleteAdminvendor(id) {\n    return this.http.delete(\"http://localhost:3000/adminvendor\" + \"/\" + id).pipe(map(res => {\n      return res;\n    }));\n  }\n  postVendor(data) {\n    return this.http.post(\"http://localhost:3000/vendorproduct\", data).pipe(map(res => {\n      return res;\n    }));\n  }\n  getVendor() {\n    return this.http.get(\"http://localhost:3000/vendorproduct\").pipe(map(res => {\n      return res;\n    }));\n  }\n  updateVendor(data, id) {\n    return this.http.put(\"http://localhost:3000/vendorproduct\" + \"/\" + id, data).pipe(map(res => {\n      return res;\n    }));\n  }\n  deleteVendor(id) {\n    return this.http.delete(\"http://localhost:3000/vendorproduct\" + \"/\" + id).pipe(map(res => {\n      return res;\n    }));\n  }\n  getProductById(username) {\n    return this.http.get(\"http://localhost:3000/vendorproduct/?vendorname=\" + username).pipe(map(res => {\n      return res;\n    }));\n  }\n  getVendorById(username) {\n    return this.http.get(\"http://localhost:3000/adminvendor/?username=\" + username).pipe(map(res => {\n      return res;\n    }));\n  }\n  log(user) {\n    this.islogged = user;\n  }\n  isloggin() {\n    if (this.islogged == true) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","ApiService","constructor","http","postAdminvendor","data","post","pipe","res","getAdminvendor","username","get","updateAdminvendor","id","put","deleteAdminvendor","delete","postVendor","getVendor","updateVendor","deleteVendor","getProductById","getVendorById","log","user","islogged","isloggin","factory","providedIn"],"sourceRoot":"","sources":["/home/aspire121/Practice/Angular/Task-3/src/app/shared/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\nislogged:any;\n\n  constructor(private http : HttpClient) { }\n\n  postAdminvendor(data : any){\n    return this.http.post<any>(\"http://localhost:3000/adminvendor\", data)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n  getAdminvendor(username:any){\n    return this.http.get<any>(\"http://localhost:3000/adminvendor?role=vendor\")\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n  updateAdminvendor(data: any, id:number){\n    return this.http.put<any>(\"http://localhost:3000/adminvendor\"+id, data)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n  deleteAdminvendor(id:number){\n    return this.http.delete<any>(\"http://localhost:3000/adminvendor\"+\"/\"+id)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n\n  postVendor(data : any){\n    return this.http.post<any>(\"http://localhost:3000/vendorproduct\", data)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n  getVendor(){\n    return this.http.get<any>(\"http://localhost:3000/vendorproduct\")\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n  updateVendor(data: any, id:number){\n    return this.http.put<any>(\"http://localhost:3000/vendorproduct\"+\"/\"+id, data)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n  deleteVendor(id:number){\n    return this.http.delete<any>(\"http://localhost:3000/vendorproduct\"+\"/\"+id)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n\n  getProductById(username:any){\n    return this.http.get<any>(\"http://localhost:3000/vendorproduct/?vendorname=\"+username)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n\n  getVendorById(username:any){\n    return this.http.get<any>(\"http://localhost:3000/adminvendor/?username=\"+username)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n\n  log(user:any){\n    this.islogged=user;\n  }\n\n  isloggin(){\n    if(this.islogged==true){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}